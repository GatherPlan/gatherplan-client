#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   For a library or package, you might want to ignore these files since the code is
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   https://pdm.fming.dev/#use-with-ide
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#   in version control.
#   install all needed dependencies.
#   intended to run in multiple environments; otherwise, check them in:
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
# .python-version
# Byte-compiled / optimized / DLL files
# C extensions
# Celery stuff
# Cython debug symbols
# Directories potentially created on remote AFP share
# Distribution / packaging
# Django stuff:
# Environments
# Files that might appear in the root of a volume
# Flask stuff:
# General
# IPython
# Icon must end with two \r
# Installer logs
# Jupyter Notebook
# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
# PyBuilder
# PyInstaller
# Pyre type checker
# Rope project settings
# SageMath parsed files
# Scrapy stuff:
# Sphinx documentation
# Spyder project settings
# Thumbnails
# Translations
# Unit test / coverage reports
# mkdocs documentation
# mypy
# pdm
# pipenv
# poetry
# pyenv
# pytype static type analyzer
### Python template
### macOS template
#Pipfile.lock
#pdm.lock
#poetry.lock
*$py.class
*.cover
*.db
*.egg
*.egg-info/
*.log
*.manifest
*.mo
*.pot
*.py,cover
*.py[cod]
*.sage.py
*.so
*.spec
.AppleDB
.AppleDesktop
.AppleDouble
.DS_Store
.DocumentRevisions-V100
.LSOverride
.Python
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
._*
.apdisk
.cache
.com.apple.timemachine.donotpresent
.coverage
.coverage.*
.dmypy.json
.eggs/
.env
.fseventsd
.hypothesis/
.idea/
.installed.cfg
.ipynb_checkpoints
.mypy_cache/
.nox/
.pdm.toml
.pybuilder/
.pyre/
.pytest_cache/
.pytype/
.ropeproject
.scrapy
.spyderproject
.spyproject
.tox/
.venv
.web
.webassets-cache
/site
ENV/
Icon
JetBrains specific template is maintained in a separate JetBrains.gitignore that can
MANIFEST
Network Trash Folder
PyCharm
Temporary Items
__pycache__/
__pypackages__/
and can be added to the global gitignore or merged into this file.  For a more nuclear
be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
build/
celerybeat-schedule
celerybeat.pid
cover/
coverage.xml
cython_debug/
db.sqlite3
db.sqlite3-journal
develop-eggs/
dist/
dmypy.json
docs/_build/
downloads/
eggs/
env.bak/
env/
htmlcov/
instance/
ipython_config.py
lib/
lib64/
local_settings.py
nosetests.xml
option (not recommended) you can uncomment the following to ignore the entire idea folder.
parts/
pip-delete-this-directory.txt
pip-log.txt
profile_default/
sdist/
share/python-wheels/
target/
var/
venv.bak/
venv/
wheels/